using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using AutoBackup.FilesystemWatcher;
using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
// <copyright file="SaveFolderWatcherTest.Constructor.g.cs">Copyright ©  2015</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>

namespace AutoBackup
{
    public partial class SaveFolderWatcherTest
    {

        private AutoResetEvent resetEvent = new AutoResetEvent(false);

        [TestMethod]
        [PexGeneratedBy(typeof (SaveFolderWatcherTest))]
        [ExpectedException(typeof (ArgumentException))]
        public void ConstructorThrowsArgumentException255()
        {
            using (var disposables = PexDisposableContext.Create())
            {
                FolderWatcher saveFolderWatcher;
                saveFolderWatcher =
                    Constructor(new string('\0', 1025), 761);
                disposables.Add(saveFolderWatcher);
                disposables.Dispose();
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof (SaveFolderWatcherTest))]
        [ExpectedException(typeof (ArgumentException))]
        public void ConstructorThrowsArgumentException476()
        {
            using (var disposables = PexDisposableContext.Create())
            {
                var saveFolderWatcher = Constructor("\0", 944);
                disposables.Add(saveFolderWatcher);
                disposables.Dispose();
            }
        }

        [TestMethod]
        [PexGeneratedBy(typeof (SaveFolderWatcherTest))]
        public void TestsWatchFiresWatchEvent()
        {
            var tempWatchFolder = ThrowawayFolder();
            var changedFileList = new List<string>();
            var detectedileList = new List<string>();

            var saveFolderWatcher = Constructor(tempWatchFolder, 1);

            saveFolderWatcher.DirectoryChangeDetected += (sender, args) =>
            {
                detectedileList = args.ChangedFiles;
                resetEvent.Set();
            };

            changedFileList = CreateThrowawayFiles(tempWatchFolder, 5);
            resetEvent.WaitOne();

            CollectionAssert.AreEquivalent(changedFileList, detectedileList);

            Directory.Delete(tempWatchFolder, true);
        }


        [TestMethod]
        [PexGeneratedBy(typeof (SaveFolderWatcherTest))]
        public void TestsWatchFiresWatchEventMultipleTimes()
        {
            var tempWatchFolder = ThrowawayFolder();
            var changedFileList = new List<string>();
            var detectedileList = new List<string>();

            var saveFolderWatcher = Constructor(tempWatchFolder, 1);

            saveFolderWatcher.DirectoryChangeDetected += (sender, args) =>
            {
                detectedileList = args.ChangedFiles;
                resetEvent.Set();
            };

            changedFileList = CreateThrowawayFiles(tempWatchFolder, new Random().Next(5, 10));
            resetEvent.WaitOne();

            CollectionAssert.AreEquivalent(changedFileList, detectedileList);

            changedFileList = DeleteThrowawayFiles(changedFileList);

            changedFileList.AddRange(CreateThrowawayFiles(tempWatchFolder, new Random().Next(5, 10)));
            resetEvent.WaitOne();

            CollectionAssert.AreEquivalent(changedFileList, detectedileList);

            saveFolderWatcher.Enabled = false;

            CleanupDirectory(tempWatchFolder);

        }

        private static void CleanupDirectory(string directory)
        {
            int retryLimit = 10;
            while (Directory.Exists(directory) && retryLimit > 0)
            {
                try
                {
                    Directory.Delete(directory, true);
                    Task.Delay(100);
                }
                catch
                {
                    retryLimit--;
                }
            }
            if (retryLimit == 0)
                throw new Exception(string.Format("Shit got broken. Clean up <{0}> yourself.", directory));
        }

        private List<string> DeleteThrowawayFiles(List<string> throwawayList)
        {
            var retval = new List<string>();
            foreach (var f in throwawayList)
            {
                var file = f.Replace(string.Format("{0}:", WatcherChangeTypes.Created), "");
                File.Delete(file);
                retval.Add(string.Format("{0}:{1}", WatcherChangeTypes.Deleted, file));
            }
            return retval;
        }

    private static List<string> CreateThrowawayFiles(string directory, int count)
        {
            var retval = new List<string>();
            for (var i = 0; i < 5; i++)
            {
                retval.Add(string.Format("{0}:{1}", WatcherChangeTypes.Created, CreateThrowawayFile(directory)));
            }
            return retval;
        }

        private static string CreateThrowawayFile(string directory)
        {
            var retval = Path.Combine(directory, Path.GetRandomFileName());
            File.Create(retval).Close();
            return retval;
        }

        private static string ThrowawayFolder()
        {
            var tempFolder = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
            Directory.CreateDirectory(tempFolder);
            return tempFolder;
        }
    }
}