using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SevenZip;
// <copyright file="ArchiverTest.StartArchiving.g.cs">Copyright ©  2015</copyright>
// <auto-generated>
// This file contains automatically generated tests.
// Do not modify this file manually.
// 
// If the contents of this file becomes outdated, you can delete it.
// For example, if it no longer compiles.
// </auto-generated>
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace AutoBackup.ArchiveTools
{
    public partial class ArchiverTest
    {
        [TestMethod]
        [PexGeneratedBy(typeof (ArchiverTest))]
        [ExpectedException(typeof (ArgumentException))]
        public void ArchiveThrowsArgumentException800()
        {
            var archiver = ArchiverFactory.Create("", "", OutArchiveFormat.SevenZip, CompressionLevel.None);
            this.Archive(archiver);
        }


        [TestMethod]
        [PexGeneratedBy(typeof(ArchiverTest))]
        [ExpectedException(typeof(IOException))]
        public void ArchiveThrowsArgumentExceptionWithLockedArchiveFile()
        {
            var archiveFilename = Path.GetTempFileName();
            var junk = File.Open(archiveFilename, FileMode.OpenOrCreate, FileAccess.Read, FileShare.None);
            var archiver = ArchiverFactory.Create(Environment.CurrentDirectory, archiveFilename, OutArchiveFormat.SevenZip, CompressionLevel.None);
            this.Archive(archiver);
            junk.Close();
            File.Delete(archiveFilename);
        }


        [TestMethod]
        [PexGeneratedBy(typeof(ArchiverTest))]
        [ExpectedException(typeof(InvalidEnumArgumentException))]
        public void ArchiveThrowsInvalidFormatException()
        {
            var archiveFilename = GetNonexistentArchiveName();
            ArchiverFactory.Create(Environment.CurrentDirectory, archiveFilename, OutArchiveFormat.Tar, CompressionLevel.None);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(ArchiverTest))]
        public void ArchiveSuggests7ZExtension()
        {
            var ext = Archiver.SuggestedExtension(OutArchiveFormat.SevenZip);
            Assert.AreEqual(ext, @".7z");
        }


        [TestMethod]
        [PexGeneratedBy(typeof(ArchiverTest))]
        public void ArchiveSuggestsZipExtension()
        {
            var ext = Archiver.SuggestedExtension(OutArchiveFormat.Zip);
            Assert.AreEqual(ext, @".zip");
        }
        private static string GetNonexistentArchiveName()
        {
            var archiveFilename = Path.Combine(Path.GetTempPath(), "garbage.zip");
            return archiveFilename;
        }

    }

}
